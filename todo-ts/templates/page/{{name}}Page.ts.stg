import "fbsgen/base"
import "fbsgen/dict"

p_block(p, module) ::= <<
«p_main_block(p, module, module.w.v.(p.("name")).val, p.("dir_name"), module.w.vfmt.("UC"), module.w.vfmt.("UC&&_==-"))»
>>

p_main_block(p, module, name, module_name, nameUC, nameKC) ::= <<
import { component } from 'vuets'
import { defp, nullp  } from 'coreds/lib/util'
import { Pager, ItemSO, SelectionFlags, PojoListState, PojoSO, PojoState } from 'coreds/lib/types'
import { PojoStore } from 'coreds/lib/pstore/'
import { mergeFrom } from 'coreds/lib/diff'
import { ParamRangeKey } from 'coreds/lib/prk'
import * as form from 'coreds/lib/form'
import * as ui from '../ui'
import { stores } from '../context'
import { «module_name» } from '../../g/«module_name»/'
const $ = «module_name».«name»

const PAGE_SIZE = 10,
    MULTIPLIER = 3

export class «name»Page {
    pager: Pager
    pstore: PojoStore<«module_name».«name»>
    
    //pnew = form.initObservable($.$new0(), $.$d)
    pupdate = form.initObservable($.$new0(), $.$d)

    constructor() {
        nullp(this, 'pager')
    }

    static created(self: «name»Page) {
        let pstore = defp(self, 'pstore', new PojoStore([], {
            desc: true,
            pageSize: PAGE_SIZE,
            multiplier: MULTIPLIER,
            descriptor: $.$d,
            createObservable(so: ItemSO, idx: number) {
                return $.$new0()
            },
            onSelect(selected: «module_name».«name», flags: SelectionFlags): number {
                if (!(flags & SelectionFlags.CLICKED_UPDATE))
                    return 0
                
                let selected_ = selected['_'] as PojoSO,
                    state = selected_.state,
                    pupdate = self.pupdate,
                    pupdate_: PojoSO,
                    original
                
                if ((flags & SelectionFlags.REFRESH)) {
                    if (!(state & PojoState.UPDATE))
                        return 0
                } else if (!(state & PojoState.UPDATE)) {
                    selected_.state = state | PojoState.UPDATE
                    if (selected['1'] === pupdate['1'])
                        return 0
                } else if (selected['1'] === pupdate['1']) {
                    selected_.state = state ^ PojoState.UPDATE
                    return 0
                }
                
                pupdate_ = pupdate['_'] as PojoSO
                original = self.pstore.getOriginal(selected)
                
                mergeFrom(original, selected['$d'], pupdate)
                if (pupdate_.msg)
                    pupdate_.msg = ''
                
                return 0
            },
            fetch(prk: ParamRangeKey, pager: Pager) {
                return $.ForUser.list(prk).then(self.fetch$$S).then(undefined, self.fetch$$F)
            }
        }))
        stores.«nameUC» = pstore
        self.pager = pstore.pager
        pstore.requestNewer()
    }

    fetch$$S(data) {
        this.pstore.cbFetchSuccess(data['1'])
    }
    fetch$$F(err) {
        this.pstore.cbFetchFailed(err)
    }
    
    pupdate$$S(data) {
        let pager = this.pager,
            selected = pager.pojo as «module_name».«name»,
            original = this.pstore.getOriginal(selected)
        form.$update_success(this.pupdate, this.pager, original, selected)
    }
    pupdate$$F(err) {
        form.$update_failed(this.pupdate, this.pager, err)
    }
    pupdate$$() {
        let pager = this.pager,
            selected = pager.pojo as «module_name».«name»,
            original = this.pstore.getOriginal(selected),
            mc = form.$update(this.pupdate, pager, original)
        
        if (!mc)
            return
        
        $.ForUser.update(form.$update_req(original['1'] as string, mc))
            .then(this.pupdate$$S).then(undefined, this.pupdate$$F)
    }
    change(e, field, pojo, update, root) {
        return form.$change(e, field, pojo, update, root)
    }
}
export default component({
    created(this: «name»Page) { «name»Page.created(this) },
    components: {
        item: {
            name: 'Item', props: { pojo: { type: Object, required: true } }, data() { return {} },
            template: /**/`
<li v-defp:pager_item="pojo" v-show="(pojo._.lstate & ${PojoListState.INCLUDED})"
    :class="(pojo._.lstate & ${PojoListState.SELECTED}) ? 'item active' : 'item'">
  {{ pojo['${$.$.title}'] }}
  <div v-show="pojo._.state & ${PojoState.UPDATE}" v-append:«nameKC»-detail="pojo._.state & ${PojoState.UPDATE}"></div>
</li>
            `/**/
        }
    },
    template: /**/`
<div v-pager="pager">
${ui.pager_controls}
${ui.pager_msg}
<ul class="ui small divided selection list">
  <item v-for="pojo of pager.array" :pojo="pojo" />
</ul>
<div style="display:none">
  <div id="«nameKC»-detail" class="detail">
    <hr />
    ${ui.form('pupdate', $.$d, null)}
  </div>
</div>
</div>`/**/
}, «name»Page)
>>
